方法一、自己想的，利用排序
import java.util.ArrayList;
import java.util.Collections;
public class Solution {
    ArrayList<Integer> list=new ArrayList<>();
    public void Insert(Integer num) {
    list.add(num);
    }

    public Double GetMedian() {
        double median=0.0;
        Collections.sort(list);
        if((list.size()%2)==1){
            //需要强制转化为double型
            median = (double)list.get(list.size()/2);
        }else {
            median=(double)(list.get(list.size()/2-1)+list.get(list.size()/2))/2;
        }
        return median; 
    }
}

方法二、利用大顶堆（维持较小部分），小顶堆（维持较大部分）实现,不知为何代码运行空间复杂度挺高。
import java.util.PriorityQueue;
import java.util.Queue;
public class Solution {

    Queue<Integer>  q1= new PriorityQueue<>();
    Queue<Integer>  q2= new PriorityQueue<>((x,y)->(y - x));
    public void Insert(Integer num) {
    //如果不相等，则应首先加入q1。
        if(q1.size()!=q2.size()){
            q1.add(num);
            q2.add(q1.poll());
        }else{
            q2.add(num);
            q1.add(q2.poll());
        }
    }
    public Double GetMedian() {
        if(q1.size()!=q2.size()){
            return (double)q1.peek();
        }else{
            return (q1.peek()+q2.peek())/2.0;
        }
        //return q1.size()!= q2.size()? q1.peek():((q1.peek()+q2.peek())/2.0);
    }
}
